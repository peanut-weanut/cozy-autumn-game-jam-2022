//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Input/inputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""inputSystem"",
    ""maps"": [
        {
            ""name"": ""mouse"",
            ""id"": ""b3e09736-a743-490c-9cfe-3f8f0348c7bf"",
            ""actions"": [
                {
                    ""name"": ""MouseLook"",
                    ""type"": ""PassThrough"",
                    ""id"": ""19a19824-11a2-414a-853d-82c6c279a5dd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drag"",
                    ""type"": ""Value"",
                    ""id"": ""cbe050cb-cdf4-451f-9cd6-5dac11455f6e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""fe54b993-3bf1-4ed7-914b-328e982daab8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""4fdb570b-c99a-4b8c-8702-b1c1c7deca2a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ce650bb7-d09f-4179-8ee3-fb9f67f074e5"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""34223ae4-fe6c-4638-b16c-9beefb96974c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0c99b96-870c-4bef-98d9-d4da7a754b86"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6193d3c-ae6a-485d-84db-34030c626995"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57107a81-ca84-4e5e-89eb-244cbae763c7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera States"",
            ""id"": ""10968248-9bbf-4631-b1c9-b36f57acf497"",
            ""actions"": [
                {
                    ""name"": ""Change View"",
                    ""type"": ""Button"",
                    ""id"": ""b65add4e-a27e-4ad0-9925-f25f91727e03"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""34c87d0b-687a-460c-bfdb-f916c74fc080"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change View"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""inputs"",
            ""id"": ""631a1cb7-2120-44cf-9f23-23df5a5b49a0"",
            ""actions"": [
                {
                    ""name"": ""Undo"",
                    ""type"": ""Button"",
                    ""id"": ""96f36fa7-93f0-4ce7-acff-f7f118893aac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""4bc216c7-18da-45d6-b2f1-9f222fe6ef06"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3df08064-1ade-4db4-8d31-ef8d268e5538"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Undo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8f50dfa-9e03-48de-9a9e-b1da3bc3b3da"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""debug"",
            ""id"": ""703bb401-c42b-4b30-802c-82795bd1341c"",
            ""actions"": [
                {
                    ""name"": ""AdvanceCutscene"",
                    ""type"": ""Button"",
                    ""id"": ""c1a2b685-5b35-46e6-a010-213dd64a3908"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ad969529-64d4-4de5-a740-e37423bcd3f8"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AdvanceCutscene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // mouse
        m_mouse = asset.FindActionMap("mouse", throwIfNotFound: true);
        m_mouse_MouseLook = m_mouse.FindAction("MouseLook", throwIfNotFound: true);
        m_mouse_Drag = m_mouse.FindAction("Drag", throwIfNotFound: true);
        m_mouse_MousePosition = m_mouse.FindAction("MousePosition", throwIfNotFound: true);
        m_mouse_Click = m_mouse.FindAction("Click", throwIfNotFound: true);
        // Camera States
        m_CameraStates = asset.FindActionMap("Camera States", throwIfNotFound: true);
        m_CameraStates_ChangeView = m_CameraStates.FindAction("Change View", throwIfNotFound: true);
        // inputs
        m_inputs = asset.FindActionMap("inputs", throwIfNotFound: true);
        m_inputs_Undo = m_inputs.FindAction("Undo", throwIfNotFound: true);
        m_inputs_Submit = m_inputs.FindAction("Submit", throwIfNotFound: true);
        // debug
        m_debug = asset.FindActionMap("debug", throwIfNotFound: true);
        m_debug_AdvanceCutscene = m_debug.FindAction("AdvanceCutscene", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // mouse
    private readonly InputActionMap m_mouse;
    private IMouseActions m_MouseActionsCallbackInterface;
    private readonly InputAction m_mouse_MouseLook;
    private readonly InputAction m_mouse_Drag;
    private readonly InputAction m_mouse_MousePosition;
    private readonly InputAction m_mouse_Click;
    public struct MouseActions
    {
        private @InputSystem m_Wrapper;
        public MouseActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseLook => m_Wrapper.m_mouse_MouseLook;
        public InputAction @Drag => m_Wrapper.m_mouse_Drag;
        public InputAction @MousePosition => m_Wrapper.m_mouse_MousePosition;
        public InputAction @Click => m_Wrapper.m_mouse_Click;
        public InputActionMap Get() { return m_Wrapper.m_mouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
        public void SetCallbacks(IMouseActions instance)
        {
            if (m_Wrapper.m_MouseActionsCallbackInterface != null)
            {
                @MouseLook.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnMouseLook;
                @MouseLook.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnMouseLook;
                @MouseLook.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnMouseLook;
                @Drag.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnDrag;
                @Drag.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnDrag;
                @Drag.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnDrag;
                @MousePosition.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnMousePosition;
                @Click.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnClick;
            }
            m_Wrapper.m_MouseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseLook.started += instance.OnMouseLook;
                @MouseLook.performed += instance.OnMouseLook;
                @MouseLook.canceled += instance.OnMouseLook;
                @Drag.started += instance.OnDrag;
                @Drag.performed += instance.OnDrag;
                @Drag.canceled += instance.OnDrag;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
            }
        }
    }
    public MouseActions @mouse => new MouseActions(this);

    // Camera States
    private readonly InputActionMap m_CameraStates;
    private ICameraStatesActions m_CameraStatesActionsCallbackInterface;
    private readonly InputAction m_CameraStates_ChangeView;
    public struct CameraStatesActions
    {
        private @InputSystem m_Wrapper;
        public CameraStatesActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeView => m_Wrapper.m_CameraStates_ChangeView;
        public InputActionMap Get() { return m_Wrapper.m_CameraStates; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraStatesActions set) { return set.Get(); }
        public void SetCallbacks(ICameraStatesActions instance)
        {
            if (m_Wrapper.m_CameraStatesActionsCallbackInterface != null)
            {
                @ChangeView.started -= m_Wrapper.m_CameraStatesActionsCallbackInterface.OnChangeView;
                @ChangeView.performed -= m_Wrapper.m_CameraStatesActionsCallbackInterface.OnChangeView;
                @ChangeView.canceled -= m_Wrapper.m_CameraStatesActionsCallbackInterface.OnChangeView;
            }
            m_Wrapper.m_CameraStatesActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ChangeView.started += instance.OnChangeView;
                @ChangeView.performed += instance.OnChangeView;
                @ChangeView.canceled += instance.OnChangeView;
            }
        }
    }
    public CameraStatesActions @CameraStates => new CameraStatesActions(this);

    // inputs
    private readonly InputActionMap m_inputs;
    private IInputsActions m_InputsActionsCallbackInterface;
    private readonly InputAction m_inputs_Undo;
    private readonly InputAction m_inputs_Submit;
    public struct InputsActions
    {
        private @InputSystem m_Wrapper;
        public InputsActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Undo => m_Wrapper.m_inputs_Undo;
        public InputAction @Submit => m_Wrapper.m_inputs_Submit;
        public InputActionMap Get() { return m_Wrapper.m_inputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputsActions set) { return set.Get(); }
        public void SetCallbacks(IInputsActions instance)
        {
            if (m_Wrapper.m_InputsActionsCallbackInterface != null)
            {
                @Undo.started -= m_Wrapper.m_InputsActionsCallbackInterface.OnUndo;
                @Undo.performed -= m_Wrapper.m_InputsActionsCallbackInterface.OnUndo;
                @Undo.canceled -= m_Wrapper.m_InputsActionsCallbackInterface.OnUndo;
                @Submit.started -= m_Wrapper.m_InputsActionsCallbackInterface.OnSubmit;
                @Submit.performed -= m_Wrapper.m_InputsActionsCallbackInterface.OnSubmit;
                @Submit.canceled -= m_Wrapper.m_InputsActionsCallbackInterface.OnSubmit;
            }
            m_Wrapper.m_InputsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Undo.started += instance.OnUndo;
                @Undo.performed += instance.OnUndo;
                @Undo.canceled += instance.OnUndo;
                @Submit.started += instance.OnSubmit;
                @Submit.performed += instance.OnSubmit;
                @Submit.canceled += instance.OnSubmit;
            }
        }
    }
    public InputsActions @inputs => new InputsActions(this);

    // debug
    private readonly InputActionMap m_debug;
    private IDebugActions m_DebugActionsCallbackInterface;
    private readonly InputAction m_debug_AdvanceCutscene;
    public struct DebugActions
    {
        private @InputSystem m_Wrapper;
        public DebugActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @AdvanceCutscene => m_Wrapper.m_debug_AdvanceCutscene;
        public InputActionMap Get() { return m_Wrapper.m_debug; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugActions set) { return set.Get(); }
        public void SetCallbacks(IDebugActions instance)
        {
            if (m_Wrapper.m_DebugActionsCallbackInterface != null)
            {
                @AdvanceCutscene.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnAdvanceCutscene;
                @AdvanceCutscene.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnAdvanceCutscene;
                @AdvanceCutscene.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnAdvanceCutscene;
            }
            m_Wrapper.m_DebugActionsCallbackInterface = instance;
            if (instance != null)
            {
                @AdvanceCutscene.started += instance.OnAdvanceCutscene;
                @AdvanceCutscene.performed += instance.OnAdvanceCutscene;
                @AdvanceCutscene.canceled += instance.OnAdvanceCutscene;
            }
        }
    }
    public DebugActions @debug => new DebugActions(this);
    public interface IMouseActions
    {
        void OnMouseLook(InputAction.CallbackContext context);
        void OnDrag(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
    }
    public interface ICameraStatesActions
    {
        void OnChangeView(InputAction.CallbackContext context);
    }
    public interface IInputsActions
    {
        void OnUndo(InputAction.CallbackContext context);
        void OnSubmit(InputAction.CallbackContext context);
    }
    public interface IDebugActions
    {
        void OnAdvanceCutscene(InputAction.CallbackContext context);
    }
}
